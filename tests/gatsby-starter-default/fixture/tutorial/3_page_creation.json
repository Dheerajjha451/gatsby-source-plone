{
  "@components": {
    "actions": {
      "@id": "http://localhost:8080/Plone/tutorial/3_page_creation/@actions"
    },
    "breadcrumbs": {
      "@id": "http://localhost:8080/Plone/tutorial/3_page_creation/@breadcrumbs"
    },
    "navigation": {
      "@id": "http://localhost:8080/Plone/tutorial/3_page_creation/@navigation"
    },
    "workflow": {
      "@id": "http://localhost:8080/Plone/tutorial/3_page_creation/@workflow"
    }
  },
  "@id": "http://localhost:8080/Plone/tutorial/3_page_creation",
  "@type": "Document",
  "UID": "ffc811f7206248378178b1f5624cca4b",
  "allow_discussion": false,
  "changeNote": "",
  "contributors": [],
  "created": "2018-08-04T19:37:17+00:00",
  "creators": [
    "admin"
  ],
  "description": "",
  "effective": "2018-08-04T00:00:00",
  "exclude_from_nav": false,
  "expires": null,
  "id": "3_page_creation",
  "is_folderish": false,
  "language": "",
  "layout": "document_view",
  "modified": "2018-08-04T19:44:14+00:00",
  "parent": {
    "@id": "http://localhost:8080/Plone/tutorial",
    "@type": "Folder",
    "description": "",
    "review_state": "published",
    "title": "Tutorial"
  },
  "relatedItems": [],
  "review_state": "published",
  "rights": "",
  "subjects": [],
  "table_of_contents": null,
  "text": {
    "content-type": "text/html",
    "data": "<p>After gatsby-source-plone has retrieved all the data and created nodes, these nodes can be used to create pages. For more detail information on page creation, visit the <a href=\"https://www.gatsbyjs.org/docs/creating-and-modifying-pages/#creating-pages-in-gatsby-nodejs\">Gatsby docs</a>.</p>\n<p>So let's start by creating pages for each <code>PloneFolder</code>:</p>\n<pre><code class=\"lang-javascript\">const path = require('path');\n\nexports.createPages = async ({ graphql, actions }) =&gt; {\n  const { createPage } = actions;\n\n  // Get data via GraphQL\n  const result = await graphql(`\n    {\n      allPloneFolder {\n        edges {\n          node {\n            _path\n          }\n        }\n      }\n    }\n  `);\n\n  // Create pages for each PloneFolder item\n  result.data.allPloneFolder.edges.forEach(({ node }) =&gt; {\n    createPage({\n      path: node._path,\n      component: path.resolve('./src/templates/default.js'),\n    });\n  });\n};\n</code></pre>\n<p>Once we've got pages created for each of the, we need to display them in our Gatsby site. For this we have to work on the <code>default.js</code> template we previously mentioned:</p>\n<pre><code class=\"lang-javascript\">const DefaultLayout = ({ data }) =&gt; (\n  &lt;Layout&gt;\n    {data &amp;&amp; data.ploneFolder &amp;&amp; &lt;Folder data={data.ploneFolder} /&gt;}\n  &lt;/Layout&gt;\n);\n\nexport const query = graphql`\n  query DefaultTemplateQuery($path: String!) {\n    ploneFolder(_path: { eq: $path }) {\n      ...Folder\n    }\n  }\n`;\n</code></pre>\n<p>Folder component displays the relevant information for an object of type PloneFolder:</p>\n<pre><code class=\"lang-javascript\">const Folder = ({ data, title }) =&gt; (\n  &lt;nav key={data._id}&gt;\n    &lt;h1&gt;{title ? title : data.title}&lt;/h1&gt;\n    &lt;p&gt;\n      &lt;strong&gt;{data.description}&lt;/strong&gt;\n    &lt;/p&gt;\n    &lt;ul className=\"list-group\"&gt;\n      {data.items.filter(item =&gt; item.title).map(item =&gt; (\n        &lt;li key={item._path} className=\"list-group-item\"&gt;\n          &lt;p&gt;\n            &lt;Link to={item._path}&gt;{item.title}&lt;/Link&gt;\n          &lt;/p&gt;\n          {item.description &amp;&amp; &lt;p&gt;{item.description}&lt;/p&gt;}\n        &lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n);\n\nexport default Folder;\n\nexport const query = graphql`\n  fragment Folder on PloneFolder {\n    id\n    title\n    description\n    items {\n      _id\n      _path\n      _type\n      description\n      title\n    }\n    _path\n  }\n`;\n</code></pre>\n<p>Contents inside a node can be retrieved by using the <code>items</code> property, which includes the list of children, irrespective of type. So here, all the children of folders are retrieved and displayed as links.</p>\n<p><em>Note: Items in a folder includes all types of Plone content objects, and cause we don't have components for other types such as Document or NewsItem and so on yet, these links would direct to the 404 page, and this is expected. The next part of the tutorial covers page creation of each object and handling them.</em></p>\n<p>To see it in action, go to <code>/demo</code> or any existing folder path and it's details and contents displayed.</p>\n<h2 id=\"displaying-plone-site-contents-at-homepage\">Displaying Plone site contents at homepage</h2>\n<p>To actually view the pages we've created in the gatsby-site, let's display the contents of the Plone site on the homepage:</p>\n<pre><code class=\"lang-javascript\">const IndexPage = ({ data }) =&gt; (\n  &lt;Layout&gt;\n    &lt;article&gt;\n      &lt;h1&gt;{data.ploneDocument.title}&lt;/h1&gt;\n      &lt;p&gt;{data.ploneDocument.description}&lt;/p&gt;\n    &lt;/article&gt;\n    &lt;Folder data={data.ploneSite} title=\"Contents\" /&gt;\n  &lt;/Layout&gt;\n);\n\nexport const query = graphql`\n  query IndexPageQuery {\n    ploneDocument(_path: { eq: \"/frontpage/\" }) {\n      id\n      title\n      description\n    }\n    ploneSite(_path: { eq: \"/\" }) {\n      ...Site\n    }\n  }\n`;\n</code></pre>\n<p>Site is a fragment defined in the <code>Folder</code> component to display items in the Plone Site (root or baseUrl):</p>\n<pre><code class=\"lang-graphql\">fragment Site on PloneSite {\n  id\n  title\n  items {\n    _id\n    _path\n    _type\n    description\n    title\n  }\n  _path\n}\n</code></pre>",
    "encoding": "utf-8"
  },
  "title": "Page Creation",
  "version": "current"
}
